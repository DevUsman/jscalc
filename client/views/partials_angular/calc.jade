#io-container(flex='flex', ng-class="{'edit-mode': editMode}", ng-if="doc")
  md-content#inputs
    form(novalidate='novalidate', name='inputsForm', role='form')
      .frame-title Inputs
      .nonsortable-container(ng-if="!editMode", ng-include="'/partials/calc_inputs'")
      .sortable-container(ng-if="editMode", ui-sortable='{axis: "y"}', ng-model="doc.metaInputs", ng-include="'/partials/calc_inputs'")
      .button-row(ng-if="editMode", layout="horizontal")
        md-button.md-primary(ng-click="addInput({$event: $event, metaInputs: doc.metaInputs, nested: false})") Add input
        span(flex)
        md-button(ng-if="showDefaultsButtons()", ng-click="updateDefaults()") Update defaults
        md-button(ng-if="showDefaultsButtons()", ng-click="loadDefaults()") Load defaults
  md-content#outputs
    .frame-title Outputs
    .button-row(ng-if="workerError", layout='horizontal', layout-align="start center")
      .outputs-warning.warning-colored-icon
      .description(flex)
        .message {{workerError.message}}
        button.link-button(ng-if='editMode && workerError.lineNumber' ng-click='gotoLine({lineNumber: workerError.lineNumber})') Line {{workerError.lineNumber}}
    .nonsortable-container(ng-if="!editMode", ng-include="'/partials/calc_outputs'")
    .sortable-container(ng-if="editMode", ui-sortable='{axis: "y"}', ng-model="doc.metaOutputs", ng-include="'/partials/calc_outputs'")
    .button-row(ng-if="editMode", layout="horizontal")
      md-button.md-primary(ng-click="addOutput({$event: $event})") Add output
      span(flex)
      md-button(ng-if="!debugMode", ng-click="toggleDebugMode()")
        .inline-icon.forward-icon.text-button-icon
        | Debug mode
      md-button(ng-if="debugMode", ng-click="toggleDebugMode()")
        .inline-icon.forward-icon.text-button-icon
        | Normal mode
      md-button(ng-if="debugMode", ng-click="calculate()") Calculate
    .debug-comment(ng-if="debugMode && debugSupported")
      | You are in debug mode. The script is not run automatically but only when you click CALCULATE button above. To pause execution at some point in your script, insert
      = ' '
      code
        a(href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger', target='_blank') debugger;
      = ' '
      | statement at that point in the script{{::getDebuggerText()}}. You can also use
      = ' '
      code
        a(href='https://developer.mozilla.org/en-US/docs/Web/API/Console.log', target='_blank') console.log()
      | .
    .debug-comment(ng-if="debugMode && !debugSupported")
      | Sorry, as far as I can tell, as of this writing Firefox and Safari do not support debugging web workers (and the script is executed in a web worker), so please use Chrome or IE11 if you would like to set breakpoints using
      = ' '
      code
        a(href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger', target='_blank') debugger;
      = ' '
      | statement. Firefox does support
      = ' '
      code
        a(href='https://developer.mozilla.org/en-US/docs/Web/API/Console.log', target='_blank') console.log()
      = ' '
      | starting from version 29 (April 2014).
