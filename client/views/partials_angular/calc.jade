#io-container(ng-class="{'edit-mode': editMode}", ng-if="doc", flex, layout-fill)
  #inputs
    form(novalidate='novalidate', name='inputsForm', role='form')
      h2.frame-title Inputs
      div(ng-include="'/partials/calc_inputs'")
      .button-row(ng-if="editMode")
        .button-row-inner
          div(layout-sm="column", layout-align-sm="center start", layout-md="column", layout-align-md="center start")
            md-button.md-primary(ng-click="addInput({$event: $event, metaInputs: doc.metaInputs, nested: false})") Add input
            md-button(ng-if="showDefaultsButtons()", ng-click="updateDefaults()") Update defaults
            md-button(ng-if="showDefaultsButtons()", ng-click="loadDefaults()") Load defaults
  #outputs
    h2.frame-title Outputs
    .button-row(ng-if="workerError")
      .button-row-inner
        div(layout='row', layout-align="start center")
          md-icon.outputs-warning(md-svg-icon="/img/icons/ic_warning_24px.svg")
          .description(flex)
            .message {{workerError.message}}
            button.link-button(ng-if='editMode && workerError.lineNumber' ng-click='gotoLine({lineNumber: workerError.lineNumber})') Line {{workerError.lineNumber}}
    div(ng-include="'/partials/calc_outputs'")
    .button-row(ng-if="editMode")
      .button-row-inner
        div(layout-sm="column", layout-align-sm="center start", layout-md="column", layout-align-md="center start")
          md-button.md-primary(ng-click="addOutput({$event: $event})") Add output
          md-button(ng-if="!debugMode", ng-click="toggleDebugMode()") Switch to debug mode
          md-button(ng-if="debugMode", ng-click="toggleDebugMode()") Switch to normal mode
          md-button(ng-if="debugMode", ng-click="calculate()") Calculate
    .debug-comment(ng-if="debugMode && debugSupported")
      | You are in debug mode. The script is not run automatically but only when you click CALCULATE button above. To pause execution at some point in your script, insert
      = ' '
      code
        a(href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger', target='_blank') debugger;
      = ' '
      | statement at that point in the script{{::getDebuggerText()}}. You can also use
      = ' '
      code
        a(href='https://developer.mozilla.org/en-US/docs/Web/API/Console.log', target='_blank') console.log()
      | .
    .debug-comment(ng-if="debugMode && !debugSupported")
      | Sorry, as far as I can tell, as of this writing Firefox and Safari do not support debugging web workers (and the script is executed in a web worker), so please use Chrome or IE11 if you would like to set breakpoints using
      = ' '
      code
        a(href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger', target='_blank') debugger;
      = ' '
      | statement. Firefox does support
      = ' '
      code
        a(href='https://developer.mozilla.org/en-US/docs/Web/API/Console.log', target='_blank') console.log()
      = ' '
      | starting from version 29 (April 2014).
